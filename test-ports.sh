#!/bin/bash

# Script de test de la configuration des ports
# Usage: ./test-ports.sh

echo "üåê Test de la configuration des ports - OpenVPN Remote Controller"
echo "================================================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour les messages
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

info() {
    echo -e "‚ÑπÔ∏è  $1"
}

echo ""
echo "üìã 1. V√©rification de la configuration Docker"
echo "---------------------------------------------"

# V√©rifier docker-compose.yml
if [ -f docker-compose.yml ]; then
    success "Fichier docker-compose.yml pr√©sent"
    
    # V√©rifier la configuration des ports
    PORT_CONFIG=$(grep -A 2 "ports:" docker-compose.yml | grep "3001:3000" || true)
    if [ -n "$PORT_CONFIG" ]; then
        success "Configuration des ports : 3001:3000"
    else
        error "Configuration des ports incorrecte dans docker-compose.yml"
        info "Configuration attendue : - \"3001:3000\" ou - \"\${WEB_HOST_PORT:-3001}:3000\""
    fi
else
    error "Fichier docker-compose.yml manquant"
fi

# V√©rifier .env
echo ""
echo "üìÅ 2. V√©rification du fichier .env"
echo "----------------------------------"

if [ -f .env ]; then
    success "Fichier .env pr√©sent"
    
    # Charger les variables
    source .env
    
    if [ -n "$WEB_HOST_PORT" ]; then
        success "WEB_HOST_PORT configur√© : $WEB_HOST_PORT"
    else
        warning "WEB_HOST_PORT non d√©fini, utilisation du port par d√©faut 3001"
        WEB_HOST_PORT=3001
    fi
    
    if [ -n "$WEB_PORT" ]; then
        success "WEB_PORT configur√© : $WEB_PORT"
    else
        warning "WEB_PORT non d√©fini"
    fi
else
    error "Fichier .env manquant"
    WEB_HOST_PORT=3001
fi

echo ""
echo "üîç 3. V√©rification des ports syst√®me"
echo "-----------------------------------"

# V√©rifier si le port h√¥te est libre
PORT_CHECK=$(netstat -tlnp 2>/dev/null | grep ":$WEB_HOST_PORT " || true)
if [ -z "$PORT_CHECK" ]; then
    success "Port $WEB_HOST_PORT disponible"
else
    warning "Port $WEB_HOST_PORT d√©j√† utilis√© :"
    echo "   $PORT_CHECK"
fi

# V√©rifier si Docker tourne
echo ""
echo "üê≥ 4. V√©rification de Docker"
echo "---------------------------"

if systemctl is-active --quiet docker; then
    success "Service Docker actif"
    
    # V√©rifier si l'application tourne
    if docker compose ps | grep -q "Up"; then
        success "Application Docker en cours d'ex√©cution"
        
        # Test de connectivit√©
        echo ""
        echo "üß™ 5. Test de connectivit√©"
        echo "-------------------------"
        
        # Test du port h√¥te
        if curl -s -f http://localhost:$WEB_HOST_PORT > /dev/null; then
            success "Application accessible sur http://localhost:$WEB_HOST_PORT"
        else
            error "Application inaccessible sur le port $WEB_HOST_PORT"
            info "V√©rifiez que l'application est d√©marr√©e et que la redirection de port fonctionne"
        fi
        
        # Test de l'API
        API_TEST=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$WEB_HOST_PORT/api/vpn/status 2>/dev/null || echo "000")
        if [ "$API_TEST" = "401" ]; then
            success "API accessible (code 401 = authentification requise)"
        elif [ "$API_TEST" = "200" ]; then
            warning "API accessible sans authentification (v√©rifiez la configuration)"
        else
            error "API inaccessible (code HTTP: $API_TEST)"
        fi
        
    else
        warning "Application Docker non d√©marr√©e"
        info "Ex√©cutez : docker compose up -d"
    fi
else
    error "Service Docker inactif"
    info "D√©marrez Docker : sudo systemctl start docker"
fi

echo ""
echo "üî• 6. V√©rification du firewall"
echo "-----------------------------"

if command -v ufw &> /dev/null; then
    UFW_STATUS=$(sudo ufw status | grep "$WEB_HOST_PORT/tcp" || true)
    if [ -n "$UFW_STATUS" ]; then
        success "Port $WEB_HOST_PORT autoris√© dans UFW"
    else
        warning "Port $WEB_HOST_PORT non autoris√© dans UFW"
        info "Autorisez le port : sudo ufw allow $WEB_HOST_PORT/tcp"
    fi
else
    info "UFW non install√©, v√©rifiez votre firewall manuellement"
fi

echo ""
echo "üåê 7. Configuration NGINX (si pr√©sent)"
echo "-------------------------------------"

if command -v nginx &> /dev/null; then
    success "NGINX install√©"
    
    # V√©rifier la configuration pour notre application
    NGINX_CONFIG=$(sudo grep -r "localhost:$WEB_HOST_PORT" /etc/nginx/sites-enabled/ 2>/dev/null || true)
    if [ -n "$NGINX_CONFIG" ]; then
        success "NGINX configur√© pour rediriger vers localhost:$WEB_HOST_PORT"
    else
        warning "NGINX non configur√© pour l'application"
        info "Configurez NGINX pour rediriger vers localhost:$WEB_HOST_PORT"
    fi
else
    info "NGINX non install√©"
fi

echo ""
echo "üìä R√âSUM√â"
echo "========="
echo "Port h√¥te configur√©    : $WEB_HOST_PORT"
echo "Port container         : 3000"
echo "URL d'acc√®s           : http://localhost:$WEB_HOST_PORT"
echo ""

# Commandes utiles
echo "üõ†Ô∏è  COMMANDES UTILES"
echo "==================="
echo "# Tester l'application"
echo "curl http://localhost:$WEB_HOST_PORT"
echo ""
echo "# Voir les logs"
echo "docker compose logs -f"
echo ""
echo "# Red√©marrer l'application"
echo "docker compose restart"
echo ""
echo "# Changer le port (√©ditez .env puis)"
echo "docker compose down && docker compose up -d"

echo ""
echo "‚úÖ Test termin√© !"
