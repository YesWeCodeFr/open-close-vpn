#!/bin/bash

# Script de pr√©-validation avant d√©ploiement
# Usage: ./pre-deploy-check.sh

echo "üîç Validation pr√©-d√©ploiement OpenVPN Remote Controller"
echo "======================================================"

ERRORS=0
WARNINGS=0

# Fonction pour signaler une erreur
error() {
    echo "‚ùå ERREUR: $1"
    ERRORS=$((ERRORS + 1))
}

# Fonction pour signaler un avertissement
warning() {
    echo "‚ö†Ô∏è  ATTENTION: $1"
    WARNINGS=$((WARNINGS + 1))
}

# Fonction pour signaler un succ√®s
success() {
    echo "‚úÖ $1"
}

echo ""
echo "üìã 1. V√©rification de l'environnement syst√®me"
echo "--------------------------------------------"

# V√©rifier l'OS
if [ -f /etc/os-release ]; then
    OS_NAME=$(grep ^NAME= /etc/os-release | cut -d'"' -f2)
    success "Syst√®me d'exploitation: $OS_NAME"
else
    warning "Impossible de d√©terminer l'OS"
fi

# V√©rifier l'architecture
ARCH=$(uname -m)
if [[ "$ARCH" == "x86_64" || "$ARCH" == "amd64" ]]; then
    success "Architecture support√©e: $ARCH"
else
    warning "Architecture non test√©e: $ARCH"
fi

# V√©rifier l'espace disque
AVAILABLE_SPACE_GB=$(df / | awk 'NR==2{printf "%.1f", $4/1024/1024}')
if (( $(echo "$AVAILABLE_SPACE_GB > 2.0" | bc -l) )); then
    success "Espace disque disponible: ${AVAILABLE_SPACE_GB}GB"
else
    error "Espace disque insuffisant: ${AVAILABLE_SPACE_GB}GB (minimum 2GB requis)"
fi

# V√©rifier la RAM
TOTAL_RAM_GB=$(free -h | awk 'NR==2{print $2}' | sed 's/Gi//')
if (( $(echo "$TOTAL_RAM_GB > 0.5" | bc -l) )); then
    success "RAM disponible: ${TOTAL_RAM_GB}GB"
else
    warning "RAM limit√©e: ${TOTAL_RAM_GB}GB (minimum 512MB recommand√©)"
fi

echo ""
echo "üê≥ 2. V√©rification de Docker"
echo "----------------------------"

# Docker install√©
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | sed 's/,//')
    success "Docker install√©: version $DOCKER_VERSION"
    
    # Docker en cours d'ex√©cution
    if systemctl is-active --quiet docker; then
        success "Service Docker actif"
    else
        error "Service Docker inactif"
    fi
    
    # Permissions Docker
    if groups $USER | grep -q docker; then
        success "Utilisateur dans le groupe docker"
    else
        error "Utilisateur $USER pas dans le groupe docker"
    fi
else
    error "Docker non install√©"
fi

# Docker Compose
if command -v docker-compose &> /dev/null; then
    COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | sed 's/,//')
    success "Docker Compose install√©: version $COMPOSE_VERSION"
else
    error "Docker Compose non install√©"
fi

echo ""
echo "üåê 3. V√©rification r√©seau"
echo "------------------------"

# V√©rifier les ports
PORT_3000=$(netstat -tlnp 2>/dev/null | grep :3000 || true)
if [ -z "$PORT_3000" ]; then
    success "Port 3000 disponible"
else
    warning "Port 3000 d√©j√† utilis√©: $PORT_3000"
fi

# Connectivit√© Internet
if ping -c 1 8.8.8.8 &> /dev/null; then
    success "Connectivit√© Internet OK"
else
    error "Pas de connectivit√© Internet"
fi

echo ""
echo "üìÅ 4. V√©rification des fichiers projet"
echo "-------------------------------------"

# Fichiers requis
REQUIRED_FILES=("docker-compose.yml" "Dockerfile" "package.json" "server.js" ".env")
for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        success "Fichier pr√©sent: $file"
    else
        error "Fichier manquant: $file"
    fi
done

# V√©rifier .env
if [ -f .env ]; then
    source .env
    
    # Variables requises
    REQUIRED_VARS=("VPN_SERVER_HOST" "VPN_SERVER_USER" "VPN_CONTAINER_NAME" "WEB_USERNAME" "WEB_PASSWORD")
    for var in "${REQUIRED_VARS[@]}"; do
        if [ -n "${!var}" ]; then
            success "Variable configur√©e: $var"
        else
            error "Variable manquante ou vide: $var"
        fi
    done
    
    # Authentification SSH
    if [ -n "$VPN_SERVER_KEY_PATH" ]; then
        if [ -f "$VPN_SERVER_KEY_PATH" ]; then
            PERMISSIONS=$(stat -c %a "$VPN_SERVER_KEY_PATH")
            if [ "$PERMISSIONS" = "600" ]; then
                success "Cl√© SSH pr√©sente avec bonnes permissions: $VPN_SERVER_KEY_PATH"
            else
                warning "Permissions de la cl√© SSH incorrectes: $PERMISSIONS (devrait √™tre 600)"
            fi
        else
            error "Cl√© SSH sp√©cifi√©e mais introuvable: $VPN_SERVER_KEY_PATH"
        fi
    elif [ -n "$VPN_SERVER_PASSWORD" ]; then
        success "Authentification par mot de passe configur√©e"
    else
        error "Aucune m√©thode d'authentification SSH configur√©e"
    fi
fi

echo ""
echo "üîó 5. Test de connectivit√© SSH"
echo "------------------------------"

if [ -f .env ]; then
    source .env
    
    if [ -n "$VPN_SERVER_HOST" ] && [ -n "$VPN_SERVER_USER" ]; then
        echo "Test de connexion √† $VPN_SERVER_USER@$VPN_SERVER_HOST..."
        
        if [ -n "$VPN_SERVER_KEY_PATH" ] && [ -f "$VPN_SERVER_KEY_PATH" ]; then
            if timeout 10 ssh -i "$VPN_SERVER_KEY_PATH" -o ConnectTimeout=5 -o StrictHostKeyChecking=no "$VPN_SERVER_USER@$VPN_SERVER_HOST" "echo 'SSH OK'" &>/dev/null; then
                success "Connexion SSH avec cl√© r√©ussie"
                
                # Test Docker sur le serveur distant
                if timeout 10 ssh -i "$VPN_SERVER_KEY_PATH" -o ConnectTimeout=5 -o StrictHostKeyChecking=no "$VPN_SERVER_USER@$VPN_SERVER_HOST" "docker ps" &>/dev/null; then
                    success "Docker accessible sur le serveur distant"
                else
                    error "Docker inaccessible sur le serveur distant"
                fi
                
                # Test du container OpenVPN
                if timeout 10 ssh -i "$VPN_SERVER_KEY_PATH" -o ConnectTimeout=5 -o StrictHostKeyChecking=no "$VPN_SERVER_USER@$VPN_SERVER_HOST" "docker ps -a | grep $VPN_CONTAINER_NAME" &>/dev/null; then
                    success "Container OpenVPN trouv√©: $VPN_CONTAINER_NAME"
                else
                    warning "Container OpenVPN non trouv√©: $VPN_CONTAINER_NAME"
                fi
            else
                error "√âchec de la connexion SSH avec cl√©"
            fi
        elif [ -n "$VPN_SERVER_PASSWORD" ]; then
            if command -v sshpass &> /dev/null; then
                if timeout 10 sshpass -p "$VPN_SERVER_PASSWORD" ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no "$VPN_SERVER_USER@$VPN_SERVER_HOST" "echo 'SSH OK'" &>/dev/null; then
                    success "Connexion SSH avec mot de passe r√©ussie"
                else
                    error "√âchec de la connexion SSH avec mot de passe"
                fi
            else
                warning "sshpass non install√©, test SSH impossible"
            fi
        fi
    fi
fi

echo ""
echo "üîí 6. V√©rification s√©curit√©"
echo "-------------------------"

# Firewall
if command -v ufw &> /dev/null; then
    UFW_STATUS=$(sudo ufw status | grep Status | awk '{print $2}')
    success "UFW install√© (statut: $UFW_STATUS)"
else
    warning "UFW non install√©"
fi

# Mots de passe par d√©faut
if [ -f .env ]; then
    source .env
    if [ "$WEB_PASSWORD" = "admin" ] || [ "$WEB_PASSWORD" = "password" ]; then
        warning "Mot de passe web par d√©faut d√©tect√©, changez-le avant la production"
    else
        success "Mot de passe web personnalis√©"
    fi
fi

echo ""
echo "üìä R√âSUM√â DE LA VALIDATION"
echo "========================="
echo "Erreurs trouv√©es: $ERRORS"
echo "Avertissements: $WARNINGS"

if [ $ERRORS -eq 0 ]; then
    echo ""
    echo "üéâ VALIDATION R√âUSSIE !"
    echo "Le syst√®me est pr√™t pour le d√©ploiement."
    echo ""
    echo "Pour d√©ployer, ex√©cutez:"
    echo "   ./deploy.sh"
    exit 0
else
    echo ""
    echo "‚ùå VALIDATION √âCHOU√âE !"
    echo "Corrigez les erreurs avant de d√©ployer."
    echo ""
    echo "Consultez le guide de d√©ploiement:"
    echo "   cat deploy-guide.md"
    exit 1
fi
